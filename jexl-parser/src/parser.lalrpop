use std::str::FromStr;

use crate::ast::{Expression, OpCode};

grammar;

pub Expression: Box<Expression> = Expr00;

Expr00: Box<Expression> = {
    <left: Expression> <operation: Op10> <right: Expr10> => Box::new(Expression::BinaryOperation { left, right, operation }),
    Expr10,
};

Expr10: Box<Expression> = {
    <left: Expr10> <operation: Op20> <right: Expr20> => Box::new(Expression::BinaryOperation { left, right, operation }),
    Expr20,
};

Expr20: Box<Expression> = {
    <left: Expr20> <operation: Op30> <right: Expr30> => Box::new(Expression::BinaryOperation { left, right, operation }),
    Expr30,
};

Expr30: Box<Expression> = {
    <left: Expr30> <operation: Op40> <right: Expr40> => Box::new(Expression::BinaryOperation { left, right, operation }),
    Expr40,
};

Expr40: Box<Expression> = {
    <left: Expr40> <operation: Op50> <right: Expr50> => Box::new(Expression::BinaryOperation { left, right, operation }),
    Expr50,
};

Expr50: Box<Expression> = {
    Number => Box::new(Expression::Number(<>)),
    Boolean => Box::new(Expression::Boolean(<>)),
    String => Box::new(Expression::String(<>)),
    Array => Box::new(Expression::Array(<>)),
    Object => Box::new(Expression::Object(<>)),
    IdentifierSequence => Box::new(Expression::IdentifierSequence(<>)),
    "(" <Expression> ")",
};

Op10: OpCode = {
    "&&" => OpCode::And,
    "||" => OpCode::Or,
};

Op20: OpCode = {
    "==" => OpCode::Equal,
    "!=" => OpCode::NotEqual,
    ">=" => OpCode::GreaterEqual,
    "<=" => OpCode::LessEqual,
    ">" => OpCode::Greater,
    "<" => OpCode::Less,
    "in" => OpCode::In,
};

Op30: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Subtract,
};

Op40: OpCode = {
    "*" => OpCode::Multiply,
    "//" => OpCode::FloorDivide,
    "/" => OpCode::Divide,
};

Op50: OpCode = {
    "%" => OpCode::Modulus,
    "^" => OpCode::Exponent,
};

Number: f64 = {
    r"[0-9]+" => f64::from_str(<>).unwrap(),
    r"[0-9]+\.[0-9]*" => f64::from_str(<>).unwrap(),
    r"\.[0-9]+" => f64::from_str(<>).unwrap(),
};

String: String = {
    <s: r#""([^"\\]*(\\")?)*""#> => s[1..s.len() - 1].to_string().replace("\\\"", "\""),
    <s: r#"'([^'\\]*(\\')?)*'"#> => s[1..s.len() - 1].to_string().replace("\\'", "'"),
};

IdentifierSequence: Vec<Box<Expression>> = {
    <head: Identifier> <tail: (IdentifierSequenceTailPart*)> => {
        let mut rv = Vec::with_capacity(tail.len() + 1);
        let mut tail = tail;
        rv.push(Box::new(Expression::String(head)));
        rv.append(&mut tail);
        rv
    }
};

Identifier: String = {
    r#"[a-zA-Z_][a-zA-Z0-9_]*"# => <>.to_string()
}

IdentifierSequenceTailPart: Box<Expression> = {
    "." <Identifier> => Box::new(Expression::String(<>)),
    "[" <Expression> "]",
};

Boolean: bool = {
    "true" => true,
    "false" => false,
}

Comma<T>: Vec<T> = {
    <v: (<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Array: Vec<Box<Expression>> = {
    "[" <Comma<Expression>> "]"
}

Object: Vec<(String, Box<Expression>)> = {
    "{" <Comma<(<String> ":" <Expression>)>> "}",
    "{}" => vec![],
}